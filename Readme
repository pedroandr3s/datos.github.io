# üêù SmartBee - Sistema de Gesti√≥n Ap√≠cola

SmartBee es una aplicaci√≥n web completa para la gesti√≥n de apiarios, colmenas y revisiones ap√≠colas. Desarrollada con React en el frontend y Node.js/Express en el backend, utilizando MariaDB como base de datos.

## üöÄ Caracter√≠sticas Principales

- **Gesti√≥n de Apiarios**: Crear, editar y organizar ubicaciones de colmenas
- **Control de Colmenas**: Seguimiento individual de cada colonia
- **Registro de Revisiones**: Formularios detallados para inspecciones
- **Dashboard Intuitivo**: Resumen visual de la actividad ap√≠cola
- **Alertas Inteligentes**: Notificaciones basadas en patrones de revisi√≥n
- **Responsive Design**: Funciona perfectamente en m√≥viles y tablets
- **Autenticaci√≥n Segura**: Sistema de login con JWT

## üìã Requisitos Previos

- **Node.js** (versi√≥n 16 o superior)
- **XAMPP** con MariaDB (o MariaDB standalone)
- **Git** (opcional, para clonar el repositorio)

## üõ†Ô∏è Instalaci√≥n

### 1. Configurar la Base de Datos

1. **Iniciar XAMPP** y activar el servicio de MariaDB
2. **Acceder a phpMyAdmin** (http://localhost/phpmyadmin)
3. **Crear la base de datos**:
   ```sql
   CREATE DATABASE smartbee;
   USE smartbee;
   ```

4. **Crear las tablas necesarias**:
   ```sql
   -- Tabla de roles
   CREATE TABLE rol (
       id INT PRIMARY KEY AUTO_INCREMENT,
       nombre VARCHAR(50) NOT NULL UNIQUE
   );

   -- Tabla de usuarios
   CREATE TABLE usuario (
       id INT PRIMARY KEY AUTO_INCREMENT,
       nombre VARCHAR(100) NOT NULL,
       apellido VARCHAR(100) NOT NULL,
       email VARCHAR(150) NOT NULL UNIQUE,
       password VARCHAR(255) NOT NULL,
       telefono VARCHAR(20),
       rol_id INT DEFAULT 1,
       fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
       FOREIGN KEY (rol_id) REFERENCES rol(id)
   );

   -- Tabla de apiarios
   CREATE TABLE apiario (
       id INT PRIMARY KEY AUTO_INCREMENT,
       nombre VARCHAR(100) NOT NULL,
       ubicacion VARCHAR(200) NOT NULL,
       descripcion TEXT,
       usuario_id INT NOT NULL,
       fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
       FOREIGN KEY (usuario_id) REFERENCES usuario(id)
   );

   -- Tabla de colmenas
   CREATE TABLE colmena (
       id INT PRIMARY KEY AUTO_INCREMENT,
       nombre VARCHAR(100) NOT NULL,
       tipo VARCHAR(50) DEFAULT 'Langstroth',
       estado ENUM('activa', 'inactiva') DEFAULT 'activa',
       apiario_id INT NOT NULL,
       fecha_instalacion DATETIME DEFAULT CURRENT_TIMESTAMP,
       FOREIGN KEY (apiario_id) REFERENCES apiario(id)
   );

   -- Tabla de revisiones
   CREATE TABLE revision (
       id INT PRIMARY KEY AUTO_INCREMENT,
       colmena_id INT NOT NULL,
       fecha_revision DATETIME NOT NULL,
       num_alzas INT DEFAULT 0,
       marcos_abejas INT DEFAULT 0,
       marcos_cria INT DEFAULT 0,
       marcos_alimento INT DEFAULT 0,
       marcos_polen INT DEFAULT 0,
       presencia_varroa ENUM('si', 'no') DEFAULT 'no',
       condicion_reina ENUM('buena', 'regular', 'mala', 'ausente') DEFAULT 'buena',
       producto_sanitario VARCHAR(100),
       dosis_sanitario VARCHAR(50),
       notas TEXT,
       FOREIGN KEY (colmena_id) REFERENCES colmena(id)
   );

   -- Insertar roles b√°sicos
   INSERT INTO rol (nombre) VALUES ('Apicultor'), ('Administrador');

   -- Crear usuario administrador (contrase√±a: admin123)
   INSERT INTO usuario (nombre, apellido, email, password, rol_id) 
   VALUES ('Admin', 'SmartBee', 'admin@smartbee.com', '$2a$10$8K1p/a0dUrziIHpfaat8-.VgWIw2N4Ii67VjZPbJM7HG7cYcrKKiG', 2);
   ```

### 2. Configurar el Backend

1. **Navegar a la carpeta del backend**:
   ```bash
   cd backend
   ```

2. **Instalar dependencias**:
   ```bash
   npm install
   ```

3. **Crear archivo .env**:
   ```env
   DB_HOST=localhost
   DB_USER=root
   DB_PASSWORD=
   DB_NAME=smartbee
   DB_PORT=3306
   JWT_SECRET=mi_clave_secreta_super_segura_123
   PORT=3001
   ```

4. **Iniciar el servidor backend**:
   ```bash
   npm run dev
   ```

   El backend estar√° disponible en: http://localhost:3001

### 3. Configurar el Frontend

1. **Navegar a la carpeta del frontend**:
   ```bash
   cd frontend
   ```

2. **Instalar dependencias**:
   ```bash
   npm install
   ```

3. **Crear archivo .env** (opcional):
   ```env
   REACT_APP_API_URL=http://localhost:3001/api
   ```

4. **Iniciar la aplicaci√≥n React**:
   ```bash
   npm start
   ```

   El frontend estar√° disponible en: http://localhost:3000

## üîë Acceso a la Aplicaci√≥n

**Credenciales por defecto:**
- **Email**: admin@smartbee.com
- **Contrase√±a**: admin123

## üì± Uso de la Aplicaci√≥n

### Dashboard Principal
- **Vista general** de estad√≠sticas
- **√öltimas revisiones** registradas
- **Acciones r√°pidas** para tareas comunes
- **Alertas y recordatorios** importantes

### Gesti√≥n de Apiarios
- **Crear nuevos apiarios** con ubicaci√≥n y descripci√≥n
- **Ver listado** de todos los apiarios
- **Editar informaci√≥n** de apiarios existentes
- **Eliminar apiarios** vac√≠os

### Gesti√≥n de Colmenas
- **Registrar nuevas colmenas** en apiarios
- **Ver estado** de cada colmena
- **Acceder a detalles** y historial
- **Gestionar informaci√≥n** b√°sica

### Registro de Revisiones
- **Formularios detallados** para inspecciones
- **Campos espec√≠ficos** para apicultura:
  - N√∫mero de alzas
  - Marcos con abejas, cr√≠a, alimento, polen
  - Presencia de varroa
  - Condici√≥n de la reina
  - Tratamientos sanitarios
  - Notas adicionales

### Perfil de Usuario
- **Editar informaci√≥n** personal
- **Cambiar configuraciones** b√°sicas

## üóÑÔ∏è Estructura de la Base de Datos

```
smartbee/
‚îú‚îÄ‚îÄ rol (roles de usuario)
‚îú‚îÄ‚îÄ usuario (informaci√≥n de usuarios)
‚îú‚îÄ‚îÄ apiario (ubicaciones de colmenas)
‚îú‚îÄ‚îÄ colmena (colmenas individuales)
‚îú‚îÄ‚îÄ revision (registros de inspecci√≥n)
‚îú‚îÄ‚îÄ nodo_tipo (tipos de sensores) *
‚îú‚îÄ‚îÄ nodo (datos de sensores) *
‚îú‚îÄ‚îÄ nodo_colmena (relaci√≥n sensores-colmenas) *
‚îî‚îÄ‚îÄ colmena_ubicacion (ubicaciones GPS) *

* Tablas preparadas para futuras funcionalidades
```

## üîß Desarrollo y Personalizaci√≥n

### Agregar Nuevas Funcionalidades

1. **Backend**: Crear nuevos controllers y routes en `/backend`
2. **Frontend**: Agregar componentes en `/frontend/src/components`
3. **Estilos**: Modificar `/frontend/src/styles/global.css`

### Variables CSS Personalizables

```css
:root {
  --primary-color: #f4a261;    /* Color principal */
  --secondary-color: #2a9d8f;  /* Color secundario */
  --accent-color: #e9c46a;     /* Color de acento */
  /* ... m√°s variables disponibles */
}
```

## üìä APIs Disponibles

### Usuarios
- `POST /api/usuarios/login` - Iniciar sesi√≥n
- `GET /api/usuarios` - Obtener todos los usuarios
- `GET /api/usuarios/:id` - Obtener usuario por ID
- `POST /api/usuarios` - Crear nuevo usuario
- `PUT /api/usuarios/:id` - Actualizar usuario
- `DELETE /api/usuarios/:id` - Eliminar usuario

### Apiarios
- `GET /api/apiarios` - Obtener todos los apiarios
- `GET /api/apiarios/:id` - Obtener apiario por ID
- `POST /api/apiarios` - Crear nuevo apiario
- `PUT /api/apiarios/:id` - Actualizar apiario
- `DELETE /api/apiarios/:id` - Eliminar apiario
- `GET /api/apiarios/:id/estadisticas` - Estad√≠sticas del apiario

### Colmenas
- `GET /api/colmenas` - Obtener todas las colmenas
- `GET /api/colmenas/:id` - Obtener colmena por ID
- `POST /api/colmenas` - Crear nueva colmena
- `PUT /api/colmenas/:id` - Actualizar colmena
- `DELETE /api/colmenas/:id` - Eliminar colmena
- `GET /api/colmenas/:id/sensores` - Datos de sensores
- `GET /api/colmenas/:id/estadisticas` - Estad√≠sticas de la colmena

### Revisiones
- `GET /api/revisiones` - Obtener todas las revisiones
- `GET /api/revisiones/:id` - Obtener revisi√≥n por ID
- `POST /api/revisiones` - Crear nueva revisi√≥n
- `PUT /api/revisiones/:id` - Actualizar revisi√≥n
- `DELETE /api/revisiones/:id` - Eliminar revisi√≥n
- `GET /api/revisiones/resumen/:colmena_id` - Resumen de revisiones
- `GET /api/revisiones/alertas/:colmena_id` - Alertas de la colmena

### Dashboard
- `GET /api/dashboard/stats` - Estad√≠sticas generales

## üö® Soluci√≥n de Problemas

### Error de Conexi√≥n a la Base de Datos
```bash
Error: ER_ACCESS_DENIED_FOR_USER
```
**Soluci√≥n**: Verificar credenciales en el archivo `.env` del backend

### Puerto 3001 ya en uso
```bash
Error: listen EADDRINUSE :::3001
```
**Soluci√≥n**: 
```bash
# Encontrar el proceso que usa el puerto
netstat -ano | findstr :3001
# Terminar el proceso
taskkill /PID [n√∫mero_de_proceso] /F
```

### Error de CORS
```bash
Access to XMLHttpRequest blocked by CORS policy
```
**Soluci√≥n**: El backend ya incluye configuraci√≥n CORS, verificar que est√© ejecut√°ndose

### Problemas de Autenticaci√≥n
- Verificar que el token JWT no haya expirado
- Comprobar que las credenciales sean correctas
- Limpiar localStorage del navegador si es necesario

## üìà Pr√≥ximas Funcionalidades

### En Desarrollo
- **Gr√°ficos de Sensores**: Visualizaci√≥n de datos de temperatura, humedad y peso
- **Exportaci√≥n de Reportes**: PDF y Excel de revisiones
- **Notificaciones Push**: Alertas en tiempo real
- **Gesti√≥n de Tratamientos**: Calendario de aplicaciones sanitarias
- **An√°lisis Predictivo**: IA para detectar problemas tempranos

### Planificadas
- **App M√≥vil**: React Native para iOS y Android
- **IoT Integration**: Conexi√≥n con sensores reales
- **Marketplace**: Venta de productos ap√≠colas
- **Comunidad**: Foro de apicultores
- **Weather API**: Integraci√≥n con datos meteorol√≥gicos

## ü§ù Contribuci√≥n

### C√≥mo Contribuir
1. **Fork** el repositorio
2. **Crear rama** para nueva funcionalidad: `git checkout -b feature/nueva-funcionalidad`
3. **Commit** cambios: `git commit -m 'Agregar nueva funcionalidad'`
4. **Push** a la rama: `git push origin feature/nueva-funcionalidad`
5. **Crear Pull Request**

### Est√°ndares de C√≥digo
- **JavaScript**: ESLint con configuraci√≥n React
- **CSS**: Variables CSS y metodolog√≠a BEM
- **Commits**: Mensajes descriptivos en espa√±ol
- **Documentaci√≥n**: Comentarios en c√≥digo complejo

## üìù Licencia

Este proyecto est√° bajo la Licencia MIT. Ver archivo `LICENSE` para m√°s detalles.

## üë• Equipo de Desarrollo

- **Backend**: Node.js, Express, MariaDB
- **Frontend**: React, Axios, Chart.js
- **Dise√±o**: CSS3, Responsive Design
- **Autenticaci√≥n**: JWT, bcrypt

## üìû Soporte

### Contacto
- **Email**: soporte@smartbee.com
- **Documentaci√≥n**: [Wiki del proyecto]
- **Issues**: [GitHub Issues]
- **Discusiones**: [GitHub Discussions]

### FAQ

**¬øPuedo usar PostgreSQL en lugar de MariaDB?**
S√≠, solo necesitas cambiar la configuraci√≥n de conexi√≥n y ajustar algunas consultas SQL espec√≠ficas.

**¬øFunciona en otros sistemas operativos?**
S√≠, SmartBee es compatible con Windows, macOS y Linux.

**¬øPuedo personalizar los campos de revisi√≥n?**
Actualmente los campos est√°n fijos, pero est√° planificado permitir personalizaci√≥n en futuras versiones.

**¬øSoporta m√∫ltiples idiomas?**
Actualmente solo espa√±ol, pero la internacionalizaci√≥n est√° en desarrollo.

## üîÑ Historial de Versiones

### v1.0.0 (Actual)
- ‚úÖ Sistema b√°sico de gesti√≥n de apiarios y colmenas
- ‚úÖ Formularios de revisi√≥n completos
- ‚úÖ Dashboard con estad√≠sticas
- ‚úÖ Autenticaci√≥n de usuarios
- ‚úÖ Dise√±o responsive

### v0.9.0 (Beta)
- ‚úÖ Implementaci√≥n de backend completo
- ‚úÖ Componentes React b√°sicos
- ‚úÖ Sistema de autenticaci√≥n

### v0.8.0 (Alpha)
- ‚úÖ Dise√±o de base de datos
- ‚úÖ Estructura del proyecto
- ‚úÖ Configuraci√≥n inicial

---

## üéâ ¬°Gracias por usar SmartBee!

SmartBee es m√°s que una aplicaci√≥n, es una herramienta dise√±ada por y para apicultores. Esperamos que te ayude a gestionar mejor tus colmenas y a obtener mejores resultados en tu actividad ap√≠cola.

**¬°Que tengas dulces cosechas! üçØüêù**